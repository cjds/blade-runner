<?php

class UserController extends BaseController {


//NOTE: Privelege level 20 is for admin ... 0 is for normal visitor.. and 15 is for Moderator 
// The gaps are kept so that more levels can come in the future
	/*
	|--------------------------------------------------------------------------
	| Default Home Controller
	|--------------------------------------------------------------------------
	|
	| You may wish to use controllers instead of, or in addition to, Closure
	| based routes. That's great! Here is an example controller method to
	| get you started. To route to this controller, just add the route:
	|
	|	Route::get('/', 'HomeController@showWelcome');
	|
	*/

	public function getLogin(){
		$title="Login";
		return View::make('login')->with('title',$title)->with('type','user');;
	}

	public function getRegister(){
		$title="Register";
		return View::make('register')->with('title',$title);
	}
	

	public function postLogin(){
		$input=Input::all();
		$rules=array(
			'email'=>'required',
			'password'=>'required',
			);

		$v = Validator::make($input, $rules);
		
		if($v->passes()){
			$credentials= array('user_email' => $input['email'],'user_password' => $input['password'],'privelege_level'=>0);
			if(Auth::attempt($credentials,true)){
				return Redirect::to('login');
			}
			else{
				return Redirect::to('login');
			}
		}
		else{
			return Redirect::to('login')->withInput()->withErrors($v);
		}
	}

	public function postRegister()
	{
		$input=Input::all();
		$rules=array(
			'user_username'=>'required|unique:users',
			'user_email'=>'required|unique:users|email',
			'user_password'=>'required',
			'user_confpassword'=>'same:user_password'
			);
		$v = Validator::make($input, $rules);
		if($v->passes()){
			$password = Hash::make($input['user_password']);
			$user=new User();
			$user->user_username=$input['user_username'];
			$user->user_password=$password;
			$user->user_email=$input['user_email'];
			$user->privelege_level=0;
			$user->save();
			return Redirect::to('login');
		}
		else{

			return Redirect::to('register')->withInput()->withErrors($v);
		}
	}

	public function getLogout(){
		Auth::logout();
		return Redirect::to('login');
	}

	public function getAdminLogin(){
		$title="Admin Login";
		return View::make('login')->with('title',$title)->with('type','admin');
	}

	public function postAdminLogin(){
		$input=Input::all();
		$rules=array(
			'email'=>'required',
			'password'=>'required',
			);

		$v = Validator::make($input, $rules);
		
		if($v->passes()){
			$credentials= array('user_email' => $input['email'],'user_password' => $input['password'],'privelege_level'=>20);
			if(Auth::attempt($credentials,true)){
				return Redirect::to('admin/home');
			}
			else{
				return Redirect::to('admin/login');
			}
		}
		else{
			return Redirect::to('admin/login')->withInput()->withErrors($v);
		}
	}

	public function postchangeUserPriveleges(){
		if (Auth::privelegecheck(20)){		
			$input=Input::all();
			foreach ($input['privilegelevel'] as $key => $value) {
				$user=User::findOrFail($key);
				$user->privelege_level=$value;
				$user->save();
			}
		}
		return Redirect::to('admin/home');
	}

	public function getModeratorHome(){
		if (Auth::privelegecheck(15)){
			$title="Moderator Home";
			return View::make('moderatorhome')->with('title',$title);	
		}
		else
			return Redirect::to('login');

	}

	public function getAdminHome(){
		//For setting people to moderators 
		//Rest will come laater
		if (Auth::privelegecheck(20)){
			$title="Admin home";
			$users=User::all();
			return View::make('adminhome')->with('title',$title)->with('users',$users);
		}
		else
			return Redirect::to('admin/login');

	}
}
?>